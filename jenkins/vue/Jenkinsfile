pipeline {
    agent any
    options {
        // 添加日志打印时间
        timestamps()
        // 设置全局超时
        timeout(time: 10, unit: 'MINUTES')
    }
    parameters {
        choice(name: 'GITHUB_BRANCH', choices: ['main', 'develop'], description: 'checkout github branch')
    }
    environment {
        GITHUB_USER_ID = '190356b3-d5e0-43b1-bd8e-02a170897900'
        GITHUB_URL = 'http://171.35.40.74:7881/root/testvue.git'
        // WS = "${WORKSPACE}"
        DOCKER_NAME = 'vue_test'  // 镜像名称
        DOCKER_IMAGE = 'vue_test:1.0' // 镜像完整版本
        DOCKER_REMOTE_IMAGE = 'localhost:5000/vue_test:1.0' //jenkins docker仓库在同一台设备  如果是其他机器 需要鉴权
        GITHUB_BRANCH = 'main'
    }
    stages {
        stage('checkout') {
            options {
                timeout(time: 2, unit: 'MINUTES')
            }
            steps {
                // sh "echo 当前ws：${WORKSPACE}, 全局ws：${WS} " 
                // sh "rm -rf ./* " //注意可能会有缓存 看实际情况 
                git (credentialsId: "${GITHUB_USER_ID}", url: "${GITHUB_URL}", branch: "${GITHUB_BRANCH}")
            }
        }
        stage('npm build') {
            agent {
                docker {
                    image  'node:14'
                    args  '-p 2000:8080 --privileged=true'
                    reuseNode true  //不单独容器，目录共享
                }
            }
            steps {
                script {
                    // sh "echo 当前ws：${WORKSPACE}, 全局ws：${WS} " 
                    sh "pwd && ls -l"
                    sh "npm -v"
                    sh 'npm config set registry https://registry.npmmirror.com'  //# 
                    sh 'npm install && npm run build'
                    sh "echo 构建完成"
                }
            }
        }
        stage('docker build') {
            steps {
                script {
                    // sh "echo 当前ws：${WORKSPACE}, 全局ws：${WS} "
                    sh "pwd && ls -l"
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    sh "pwd && ls -l"
                }
            }
        }

        stage("deploy") {
            steps {
                script {
                //    sh "echo 当前ws：${WORKSPACE}, 全局ws：${WS} "
                   sh "pwd && ls -l"
                   sh "docker stop -f $DOCKER_NAME  || true "
                   sh "docker rm -f $DOCKER_NAME  || true "
                   sh "docker run --rm -it -d -p 8081:8080 --name=$DOCKER_NAME $DOCKER_IMAGE "
               }
            }
        }
        stage('docker push') {
            when {
                expression {
                    "${params.GITHUB_BRANCH}" == "main"
                }
            }
            steps {
                script {
                    //注意这里我使用刚好 jenkins docker仓库在同一台设备 所以直接提交 localhost
                    // withDockerRegistry(credentialsId: "${ALIYUN_USER_ID}", url: 'http://registry.cn-shenzhen.aliyuncs.com') {
                        sh "docker tag ${DOCKER_IMAGE} ${DOCKER_REMOTE_IMAGE}"
                        sh "docker push ${DOCKER_REMOTE_IMAGE}"
                    // }
                }
            }
        }
    }
}